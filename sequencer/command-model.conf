subsystem = TCS
component = tcs-seq

description = "TCS Sequencer commands."

receive = [

  {
    name = initialize
    description = "Ready the TCS system for operations.  This includes powering up amplifiers and drives.  It does not start any motion."
  }  
  {
    name = shutdown
    description = "Shutdown TCS system, including amplifiers."
  }
  {
    name = datum
    description = "Locate all mechanisms and move to their home positions."
  }
  {
    name = park
    description = "Move all mechanisms to the stow positions."
  }
  {
    name = setInstrument
    description = "Specify current instrument being used for observing"
    args = [
      {
        name = instrument
	description = "Name of instrument"
	enum = [IRIS, WFOS]
      }
    ]
  }
  {
    name = setPointingOrigin
    description = ""
    args = [
      {
        name = origin
        description = ""
        type = string
      }
    ]
  }
  {
    name = setWrapMoveDirection
    description = "Direction for Azmimuth and Rotator Wraps to move.  Possible values are Clockwise (CW), Counter-Clockwise (CCW), and Shortest Path (SP).  During observing, they are typically set to Shortest Path. "
    args = [
      {
        name=wrap
	description = "Which wrap this applies to"
	enum=[AZIMUTH, ROTATOR, BOTH]
      }
      {
        name=direction
	description = "Direction to move specified wrap(s)"
	enum=[CW, CCW, SP]
      }

    ]
  }
  {
    name = clearTargets
    decription = "Clear all currently added targets"
  }
  {
    name = addTrackingTarget
    description = "Specify a tracking target information for next observation. This includes the science target, wavefront sensor stars, and guide stars."
    requiredArgs = [name, type, typeID, coordinates, referenceFrame]
    args = [
      {
        name = name
	description = "Target name"
	type = string
      }
      {
        name = type
	description = "Type of target being set"
	enum = [OBJECT, WFS, ODGW, GUIDER]
      }
      {
        name = typeID
	description = "Identifier indicating which of the type target is for (e.g. oiwfs1"
	type = string
      }
      {
        name = coordinates
	description = "Right Ascension and Declination of target"
	type = RaDec
      }
      {
        name = referenceFrame
	description = '''
	Nominated celestial reference system

	International Celestial Reference System (ICRS) is the current standard celestial reference system adopted by the International Astronomical Union (IAU). It is the simplest target reference system. It represents a fixed position in the ICRF.

	Fifth Fundamental Catalogue (FK5) is similar to ICRS targets but with the addition of the equinox (a Julian epoch). It represents a fixed position in the FK5.

	The APPT reference system is used to represents a geocentric apparent place.

	The APPT_TOPOreference system is used to represents a topocentric apparent places. 

	'''
	eum = [ICRS, FK5, APPT, APPT_TOPO]
      }
      {
        name = epoch
	description = "epoch for coordinates [ICRS, FK5]"
	enum = [J2000, ??]
      }
      {
        name = properMotionRa
	description = "proper motion of target in RA [ICRS, FK5]"
	type = float
	units = mas/year
      }
      {
        name = properMotionDec
	description = "proper motion of target in declination [ICRS, FK5]"
	type = float
	units = mas/year
      }
      {
        name = radialVelocity
	description = "radial velocity of target [ICRS, FK5]"
	type = float
	units = km/s
      }
      {
        name = referenceTime
	description = "?. For non-siderial targets"
	type = time
      }
      {
        name = differentialTrackingRateRA
	description = "?. For non-siderial targets"
	type = mas/day?
      }	
      {
        name = differentialTrackingRateDec
	description = "?. For non-siderial targets"
	type = mas/day?
      }	
      {
        name = wavelength
	description = "?"
	type = float
	units = um
      }
      {
        name = targetWavelength
	description = "?"
	type = float
	units = um
      }
      {
        name = rates
	description = "?"
	type = float
	units = um
      }

    ]
  }
  {
    name = addSolarSystemTarget
    description = "Specify a Solar System target information for next observation. This includes the science target, wavefront sensor stars, and guide stars."
    args = [
      {
        name = name
	description = "Target name"
	type = string
      }
      {
        name = type
	description = "Type of target being set"
	enum = [OBJECT, WFS, ODGW, GUIDER]
      }
      {
        name = typeID
	description = "Identifier indicating which of the type target is for (e.g. oiwfs1"
	type = string
      }
      {
        name = referenceFrame
	description = "Nominated celestial reference system"
	eum = [AAMajorPlanet, AAMinorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, MPCMinorPlanet, MPCComet]
      }
      {
        name = epochofel
	description = "Epoch of elements [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = ??
      }
      {
        name = epochofperih
	description = "Epoch of perihelion [MPCMinorPlanet, MPCComet]"
	type = ??
      }
      {
        name = orbinc
	description = "Orbital inclination [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = longascnode
	description = "Longitude of ascending node [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = argofperih
	description = "Argument of perihelion [JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = meandist
	description = "Mean distance [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet]"
	type = float
	units = AU
      }
      {
        name = peridist
	description = "Perihelion distance [MPCMinorPlanet, MPCComet]"
	type = float
	units = AU
      }
      {
        name = eccentricity
	description = "Eccentricity of orbit [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = meanlong
	description = "Mean longitude [AAMajorPlanet]"
	type = float
      }
      {
        name = meananom
	description = "Mean anomoly [JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet]"
	type = float
      }
      {
        name = dailymot
	description = "Daily motion [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet]"
	type = float
      }
      {
        name = wavelength
	description = ""
	type = float
	units = um
      }

      {
        name = targetWavelength
	description = "?"
	type = float
	units = um
      }
      {
        name = rates
	description = "?"
	type = float
	units = um
      }

    ]
  }
  {
    name = addPlanetTarget
    description = "Specify a planet target information for next observation. This includes the science target, wavefront sensor stars, and guide stars.  For the seven major planets (not including the Earth and Pluto) there is a class called Planet that uses ephemerides.  Reference frame is Ephemerides."
    args = [
      {
        name = name
	description = "Planet name"
	type = string
      }
      {
        name = type
	description = "Type of target being set"
	enum = [OBJECT, WFS, ODGW, GUIDER]
      }
      {
        name = typeID
	description = "Identifier indicating which of the type target is for (e.g. oiwfs1"
	type = string
      }
      {
        name = wavelength
	description = ""
	type = float
	units = um
      }

      {
        name = targetWavelength
	description = "?"
	type = float
	units = um
      }
      {
        name = rates
	description = "?"
	type = float
	units = um
      }

    ]
  }
  {
    name = setSpectralWeights
    description = "Set the ADC spectral weights (spectral energy distribution)"
    args = [
      {
        name=weights
	description = "Array of weights"
	type = FloatArray
      }
      {
        name=wavelengths
	description = "Array of wavelengths for each weight"
	type = FloatArray
	units = um
      }
      {
        name=adcName
	description = "Name of ADC these weights apply to"
	type = string
      }
    ]
  }
  {
    name = adjustPointing
    description = "Start process to refine telescope pointing"
    args = [
      {
        name = name
	description = "Target name"
	type = string
      }
      {
        name = coordinates
	description = "Right Ascension and Declination of target"
	type = RaDec
      }
      {
        name = coordinateFrame
	description = ""
	eum = [??,??]
      }
      {
        name = equinox
	description = "equinox for coordinates"
	enum = [ ]
      }
      {
        name = epoch
	description = "epoch for coordinates"
	enum = [J2000, ??]
      }
      {
        name = parallax
	description = "parallax of target in milliarcsecs"
	type = float
	units = mas
      }
      {
        name = properMotionRa
	description = "proper motion of target in RA"
	type = float
	units = mas/year
      }
      {
        name = properMotionDec
	description = "proper motion of target in declination"
	type = float
	units = mas/year
      }
    ]
  }
  {
    name = startGuiding
    description = "Attempt to close guide loops at current position"
    args = [
      {
        name = centroidOnly
	description = "Set if centroids are calculated but don't apply guider corrections"
	type = boolean
      }
    ]
  }
  {
    name = setOffsetMode
    description = "Specify whether future offsets are relative to base or relative to current position"
    args = [
      {
        name = mode
	description = "Set to BASE if offset are made relative to base position, set to CURRENT if relative to current position"
	enum = [BASE, CURRENT]
      }
    ]
  }
  {
    name = offset
    description = "Move the telescope some small amount for nodding or dithering"
    args = [
      {
        name = coorindateSystem
	description = "Coordinate system in which to apply offsets"
	enum = [RADEC, XY, ALTAZ]
      }
      {
        name = x
	description = "first value of offset in specified coordinate system"
	type = float
      }
      {
        name = y
	description = "second value of offset in specified coordinate system"
	type = float
      }
      {
        name = virtualTelescope
	description = "Virtual telescope for the pointing kernel to use to calculate offsets"
	enum = [IRIS-IFS, IRIS-IMAGER, WFOS]
      }
    ]  
  }
  {
    name = setRotator
    description = "Set the rotator angle and mode."
    args = [
      {
        name = positionAngle
        description = "Position angle of current instrument"
        type = float
      }
      {
        name = mode
        description = "Rotator mode"
        enum = [VERTICAL, STATIONARY, POSITIONANGLE]
      }
    ]
  }
  